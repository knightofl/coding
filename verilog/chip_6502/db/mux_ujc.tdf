--lpm_mux CASCADE_CHAIN="MANUAL" DEVICE_FAMILY="Cyclone V" IGNORE_CASCADE_BUFFERS="OFF" LPM_SIZE=5 LPM_WIDTH=1 LPM_WIDTHS=3 data result sel
--VERSION_BEGIN 22.1 cbx_lpm_mux 2022:10:25:15:32:10:SC cbx_mgl 2022:10:25:15:42:35:SC  VERSION_END


-- Copyright (C) 2022  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and any partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details, at
--  https://fpgasoftware.intel.com/eula.



--synthesis_resources = lut 3 
SUBDESIGN mux_ujc
( 
	data[4..0]	:	input;
	result[0..0]	:	output;
	sel[2..0]	:	input;
) 
VARIABLE
	l1_w0_n0_mux_dataout	:	WIRE;
	l1_w0_n1_mux_dataout	:	WIRE;
	l1_w0_n2_mux_dataout	:	WIRE;
	l1_w0_n3_mux_dataout	:	WIRE;
	l2_w0_n0_mux_dataout	:	WIRE;
	l2_w0_n1_mux_dataout	:	WIRE;
	l3_w0_n0_mux_dataout	:	WIRE;
	data_wire[13..0]	: WIRE;
	result_wire_ext[0..0]	: WIRE;
	sel_wire[8..0]	: WIRE;

BEGIN 
	l1_w0_n0_mux_dataout = sel_wire[0..0] & data_wire[1..1] # !(sel_wire[0..0]) & data_wire[0..0];
	l1_w0_n1_mux_dataout = sel_wire[0..0] & data_wire[3..3] # !(sel_wire[0..0]) & data_wire[2..2];
	l1_w0_n2_mux_dataout = sel_wire[0..0] & data_wire[5..5] # !(sel_wire[0..0]) & data_wire[4..4];
	l1_w0_n3_mux_dataout = sel_wire[0..0] & data_wire[7..7] # !(sel_wire[0..0]) & data_wire[6..6];
	l2_w0_n0_mux_dataout = sel_wire[4..4] & data_wire[9..9] # !(sel_wire[4..4]) & data_wire[8..8];
	l2_w0_n1_mux_dataout = sel_wire[4..4] & data_wire[11..11] # !(sel_wire[4..4]) & data_wire[10..10];
	l3_w0_n0_mux_dataout = sel_wire[8..8] & data_wire[13..13] # !(sel_wire[8..8]) & data_wire[12..12];
	data_wire[] = ( l2_w0_n1_mux_dataout, l2_w0_n0_mux_dataout, l1_w0_n3_mux_dataout, l1_w0_n2_mux_dataout, l1_w0_n1_mux_dataout, l1_w0_n0_mux_dataout, B"000", data[]);
	result[] = result_wire_ext[];
	result_wire_ext[] = ( l3_w0_n0_mux_dataout);
	sel_wire[] = ( sel[2..2], B"000", sel[1..1], B"000", sel[0..0]);
END;
--VALID FILE
